// @ts-check
import globals from 'globals';
import pluginJs from "@eslint/js";
import tseslint from "typescript-eslint";

/** @type {import('eslint').Linter.FlatConfig['rules']} */
const rules = {
  'accessor-pairs': 'error',
  'array-bracket-newline': 'off',
  'array-bracket-spacing': ['error', 'never'],
  'array-callback-return': 'error',
  'array-element-newline': ['error', 'consistent'],
  'arrow-body-style': ['error', 'as-needed'],
  'arrow-parens': ['error', 'as-needed'],
  'arrow-spacing': 'error',
  'block-scoped-var': 'error',
  'block-spacing': ['error', 'always'],
  'brace-style': ['error', '1tbs', {
    allowSingleLine: true,
  }],
  'callback-return': 'off',
  'camelcase': 'error',
  'capitalized-comments': 'off',
  'class-methods-use-this': 0,
  'comma-dangle': ['error', 'always-multiline'],
  'comma-spacing': ['error', {
    before: false,
    after: true,
  }],
  'comma-style': ['error', 'last'],
  'complexity': 'error',
  'computed-property-spacing': ['error', 'never'],
  'consistent-return': 'error',
  'consistent-this': 'error',
  'constructor-super': 'error',
  'curly': ['warn', 'multi', 'consistent'],
  'default-case': ['error', {
    commentPattern: '^skip\\sdefault',
  }],
  'default-param-last': ['error'],
  'dot-location': ['error', 'property'],
  'dot-notation': 'error',
  'eol-last': ['error', 'always'],
  'eqeqeq': ['error', 'always'],
  'for-direction': 'error',
  'function-call-argument-newline': 'off',
  'func-call-spacing': ['error', 'never'],
  'func-name-matching': ['error', 'always'],
  'func-names': 'error',
  'func-style': 'off',
  'function-paren-newline': ['error', 'multiline'],
  'generator-star-spacing': ['error', 'before'],
  'getter-return': 'error',
  'global-require': 'error',
  'guard-for-in': 'error',
  'grouped-accessor-pairs': ['error', 'setBeforeGet'],
  'handle-callback-err': 'off',
  'id-blacklist': 'off',
  'id-length': 'off',
  'id-match': 'off',
  'implicit-arrow-linebreak': ['error', 'beside'],
  'indent': ['error', 2, {
    SwitchCase: 1,
  }],
  'init-declarations': 'off',
  'jsx-quotes': ['error', 'prefer-double'],
  'key-spacing': ['error', {
    beforeColon: false,
    afterColon: true,
    mode: 'strict',
  }],
  'keyword-spacing': ['error', {
    before: true,
    after: true,
    overrides: {
      return: { after: true },
      throw: { after: true },
      case: { after: true },
    },
  }],
  'line-comment-position': 'off',
  'linebreak-style': ['error', 'unix'],
  'lines-around-comment': 'off',
  'lines-between-class-members': ['error', 'always', {
    exceptAfterSingleLine: true,
  }],
  'max-classes-per-file': 0,
  'max-depth': 'off',
  'max-len': ['off', 120],
  'max-lines': 'off',
  'max-lines-per-function': 'off',
  'max-nested-callbacks': 'error',
  'max-params': 'off',
  'max-statements': 'off',
  'max-statements-per-line': 'off',
  'multiline-comment-style': ['error', 'starred-block'],
  'multiline-ternary': 'off',
  'new-cap': 0,
  'new-parens': 'error',
  'newline-per-chained-call': 0,
  'no-alert': 'error',
  'no-array-constructor': 'error',
  'no-async-promise-executor': 'error',
  'no-await-in-loop': 'error',
  'no-bitwise': 'off',
  'no-buffer-constructor': 'error',
  'no-caller': 'error',
  'no-case-declarations': 'off',
  'no-catch-shadow': 'off',
  'no-class-assign': 'error',
  'no-compare-neg-zero': 'error',
  'no-cond-assign': ['error', 'always'],
  'no-confusing-arrow': 'error',
  'no-console': 'off',
  'no-const-assign': 'error',
  'no-constant-condition': 'error',
  'no-constructor-return': 'error',
  'no-continue': 'error',
  'no-control-regex': 'error',
  'no-debugger': 'error',
  'no-delete-var': 'error',
  'no-div-regex': 'error',
  'no-dupe-args': 'error',
  'no-dupe-class-members': 'error',
  'no-dupe-else-if': 'error',
  'no-dupe-keys': 'error',
  'no-duplicate-case': 'error',
  'no-duplicate-imports': 'error',
  'no-else-return': ['error', {
    allowElseIf: false,
  }],
  'no-empty': 'error',
  'no-empty-character-class': 'error',
  'no-empty-function': 'off',
  'no-empty-pattern': 'error',
  'no-eq-null': 'error',
  'no-eval': 'error',
  'no-ex-assign': 'error',
  'no-extend-native': 'error',
  'no-extra-bind': 'error',
  'no-extra-boolean-cast': 'error',
  'no-extra-label': 'error',
  'no-extra-parens': ['error', 'all', {
    conditionalAssign: true,
    returnAssign: true,
    nestedBinaryExpressions: false,
    ignoreJSX: 'all',
    enforceForArrowConditionals: false,
  }],
  'no-extra-semi': 'error',
  'no-fallthrough': ['error', {
    commentPattern: 'falls?',
  }],
  'no-floating-decimal': 'error',
  'no-func-assign': 'error',
  'no-global-assign': 'error',
  'no-implicit-coercion': ['error', {
    boolean: false,
    number: true,
    string: true,
    allow: ['!!'],
  }],
  'no-implicit-globals': 'error',
  'no-implied-eval': 'error',
  'no-import-assign': 'error',
  'no-inline-comments': 'off',
  'no-inner-declarations': 'error',
  'no-invalid-regexp': 'error',
  'no-invalid-this': 'error',
  'no-irregular-whitespace': 'error',
  'no-iterator': 'error',
  'no-label-var': 'error',
  'no-labels': 'error',
  'no-lone-blocks': 'error',
  'no-lonely-if': 'error',
  'no-loop-func': 'error',
  'no-magic-numbers': 'off',
  'no-misleading-character-class': 'error',
  'no-mixed-operators': ['error', {
    groups: [
      ['%', '**'],
      ['%', '+'],
      ['%', '-'],
      ['%', '*'],
      ['%', '/'],
      ['**', '+'],
      ['**', '-'],
      ['**', '*'],
      ['**', '/'],
      ['&', '|', '^', '~', '<<', '>>', '>>>'],
      ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
      ['&&', '||'],
      ['in', 'instanceof'],
    ],
    allowSamePrecedence: false,
  }],
  'no-mixed-requires': 'error',
  'no-mixed-spaces-and-tabs': 'error',
  'no-multi-assign': 'error',
  'no-multi-spaces': ['error', {
    exceptions: {
      VariableDeclarator: true,
      Property: true,
    },
  }],
  'no-multi-str': 'error',
  'no-multiple-empty-lines': 'error',
  'no-negated-condition': 'off',
  'no-nested-ternary': 'error',
  'no-new': 'error',
  'no-new-func': 'error',
  'no-new-object': 'error',
  'no-new-require': 'error',
  'no-new-symbol': 'error',
  'no-new-wrappers': 'error',
  'no-obj-calls': 'error',
  'no-octal': 'error',
  'no-octal-escape': 'error',
  'no-param-reassign': 'error',
  'no-path-concat': 'error',
  'no-plusplus': 'off',
  'no-process-env': 'off',
  'no-process-exit': 'off',
  'no-proto': 'error',
  'no-prototype-builtins': 'error',
  'no-redeclare': 'error',
  'no-regex-spaces': 'warn',
  'no-restricted-globals': 'off',
  'no-restricted-imports': 'off',
  'no-restricted-modules': 'off',
  'no-restricted-properties': 'error',
  'no-restricted-syntax': ['error',
    {
      selector: 'ForInStatement',
      message: 'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
    },
    {
      selector: 'ForOfStatement',
      message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
    },
    {
      selector: 'LabeledStatement',
      message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
    },
    {
      selector: 'WithStatement',
      message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
    },
  ],
  'no-return-assign': ['error', 'always'],
  'no-return-await': 'error',
  'no-script-url': 'error',
  'no-self-assign': ['warn', {
    props: true,
  }],
  'no-self-compare': 'warn',
  'no-setter-return': 'warn',
  'no-sequences': 'error',
  'no-shadow': 'error',
  'no-shadow-restricted-names': 'error',
  'no-sparse-arrays': 'error',
  'no-sync': 'off',
  'no-tabs': 'error',
  'no-template-curly-in-string': 'error',
  'no-ternary': 'off',
  'no-this-before-super': 'error',
  'no-throw-literal': 'error',
  'no-trailing-spaces': ['error', {
    skipBlankLines: true,
    ignoreComments: false,
  }],
  'no-undef': 'error',
  'no-undef-init': 'error',
  'no-undefined': 'off',
  'no-underscore-dangle': 'off',
  'no-unexpected-multiline': 'error',
  'no-unmodified-loop-condition': 'warn',
  'no-unneeded-ternary': 'error',
  'no-unreachable': 'error',
  'no-unsafe-finally': 'error',
  'no-unsafe-negation': 'error',
  'no-unused-expressions': ['error', {
    allowShortCircuit: false,
    allowTernary: false,
    allowTaggedTemplates: false,
  }],
  'no-unused-labels': 'error',
  'no-unused-vars': ['error', {
    vars: 'all',
    args: 'after-used',
    ignoreRestSiblings: true,
  }],
  'no-use-before-define': ['error', {
    functions: true,
    classes: true,
    variables: true,
  }],
  'no-useless-call': 'error',
  'no-useless-catch': 'error',
  'no-useless-computed-key': 'error',
  'no-useless-concat': 'error',
  'no-useless-constructor': 'error',
  'no-useless-escape': 'error',
  'no-useless-rename': ['error', {
    ignoreDestructuring: false,
    ignoreImport: false,
    ignoreExport: false,
  }],
  'no-useless-return': 'error',
  'no-var': 'error',
  'no-void': 'error',
  'no-warning-comments': ['off', {
    terms: ['todo', 'fixme', 'xxx'],
    location: 'start',
  }],
  'no-whitespace-before-property': 'error',
  'no-with': 'error',
  'nonblock-statement-body-position': ['error', 'beside'],
  'object-curly-newline': ['error', {
    multiline: true,
    consistent: true,
  }],
  'object-curly-spacing': ['error', 'always'],
  'object-property-newline': ['error', {
    allowAllPropertiesOnSameLine: true,
  }],
  'object-shorthand': 'error',
  'one-var': 'off',
  'one-var-declaration-per-line': 'error',
  'operator-assignment': ['error', 'always'],
  'operator-linebreak': 'error',
  'padded-blocks': ['error', 'never'],
  'padding-line-between-statements': 'error',
  'prefer-arrow-callback': 'error',
  'prefer-const': 'error',
  'prefer-destructuring': ['error', {
    'VariableDeclarator': {
      'array': false,
      'object': true,
    },
  }],
  'prefer-exponentiation-operator': 'off',
  'prefer-named-capture-group': 'error',
  'prefer-numeric-literals': 'error',
  'prefer-object-spread': 'error',
  'prefer-promise-reject-errors': ['error', {
    allowEmptyReject: true,
  }],
  'prefer-rest-params': 'error',
  'prefer-regex-literals': 'off',
  'prefer-spread': 'error',
  'prefer-template': 'error',
  'quote-props': ['error', 'consistent'],
  'quotes': ['error', 'single', { avoidEscape: true }],
  'radix': 'error',
  'require-atomic-updates': 'error',
  'require-await': 'off',
  'require-unicode-regexp': 'off',
  'require-yield': 'error',
  'rest-spread-spacing': 'error',
  'semi': 'error',
  'semi-spacing': 'error',
  'semi-style': 'error',
  'sort-imports': 'off',
  'sort-keys': 'off',
  'sort-vars': 'error',
  'space-before-blocks': 'error',
  'space-before-function-paren': 0,
  'space-in-parens': 'error',
  'space-infix-ops': 'error',
  'space-unary-ops': 'error',
  'spaced-comment': 'error',
  'strict': 0,
  'switch-colon-spacing': 'error',
  'symbol-description': 'error',
  'template-curly-spacing': 'error',
  'template-tag-spacing': 'error',
  'unicode-bom': 'error',
  'use-isnan': 'error',
  'valid-typeof': 'error',
  'vars-on-top': 'error',
  'wrap-iife': ['error', 'inside'],
  'wrap-regex': 'error',
  'yield-star-spacing': ['error', 'before'],
  'yoda': 'error',

  // Typescript
  '@typescript-eslint/no-non-null-assertion': 0,
};

export default tseslint.config(
  {
    languageOptions: {
      globals: globals.browser
    }
  },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  { rules }
);
